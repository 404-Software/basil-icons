const path = require('path') as typeof import('path')
const fs = require('fs') as typeof import('fs')
import { transform } from '@svgr/core'

type IconType = 'outline' | 'solid' 
const packs: IconType[] = ['solid' , 'outline']

const iconFileDirectory = (
  pack: IconType
) => path.resolve(__dirname, `./${pack}`)


const getIconSvg = async (
  filename: string,
  pack: IconType
) => {
  return new Promise<string>((resolve) =>
    fs.readFile(
      path.resolve(iconFileDirectory(pack), filename),
      'utf8',
      (_, svg) => resolve(svg)
    )
  )
}

const srcDirectory = path.resolve(__dirname, '../src/')

const run = async () => {
  await Promise.all(
   packs.map(pack => fs.readdirSync(iconFileDirectory(pack)).map(async (filename) => {
      const svg = await getIconSvg(filename, pack)

      console.log(filename);
      

      const componentName = getComponentName(filename)

      

      const transformed = await transform(
        svg,
        {
          native: true,
          ref: false,
          expandProps: 'end',
          typescript: true,
          svgProps: {
            fill: 'currentColor',
          },
        },
        {
          componentName: `${componentName}${capitalizeFirstLetter(pack)}`,
        }
      )

      console.log('done');


      const outDirectory = srcDirectory
      const outPath = path.resolve(
        outDirectory,
        pack,
        filename.replace('.svg', `.tsx`)
      )

      await new Promise((resolve) => {
        fs.writeFile(outPath, heading + '\n' + transformed, resolve)
      })
    })
      )
  )

  const generateIndexFile = () => {
    const types: string[] = []
    
    packs.forEach((pack, packIndex) =>{
      const contents: string[] = []

      fs.readdirSync(iconFileDirectory(pack)).forEach((filename, index) => {
        contents.push(
          `export { default as ${getComponentName(
            filename
          )}${capitalizeFirstLetter(pack)} } from './${
            filename.split('.')[0]
          }'`
        )

        if(packIndex !== 0) return 
        
        types.push(
          `${index === 0 ? '' : ' |'}'${getComponentName(
            filename
          )}'`
        )
      })

      fs.writeFileSync(
        path.resolve('./', `src/${pack}`, 'index.ts'),
        heading +
          '\n' +
          contents.join('\n') 
      )
    })
  

    fs.writeFileSync(
      path.resolve('./', 'index.ts'),
      heading +
        `\n\nexport type BasilIcons = ` +
        types.join('\n')
    )
  }

  generateIndexFile()
}

const capitalizeFirstLetter = (str: string) =>
  str.charAt(0).toUpperCase() + str.slice(1)

const heading = `// ðŸŒŠ this file is auto-generated by 404 Software's script. don't edit it.
// https://404-software.com`

run()

// pascal case
const getComponentName = (filename: string) => {
  return filename
    .split('.')[0]
    .toLowerCase()
    .replace(new RegExp(/[-_]+/, 'g'), ' ')
    .replace(new RegExp(/[^\w\s]/, 'g'), '')
    .replace(
      new RegExp(/\s+(.)(\w*)/, 'g'),
      //   @ts-expect-error idk
      ($1, $2, $3) => `${$2.toUpperCase() + $3}`
    )
    .replace(new RegExp(/\w/), (s) => s.toUpperCase())
}
